---
format: 
    revealjs:
        theme: default
        slide-number: true
        transition: "slide"
        highlight-style: arrow
        chalkboard: 
            buttons: false
        controls-layout: bottom-right
        controls: true
from: markdown+emoji
jupyter: python3
execute: 
  cache: true
---

##

## napari

## What is napari? A fast, interactive viewer for multi-dimensional images in Python

```{python}
#| echo: false
import napari
import numpy as np
from skimage import data, filters, measure, morphology
from skimage.measure import regionprops

cells3d = data.cells3d()

nuclei = cells3d[:, 1, :, :]
median = filters.median(nuclei)

threshold = median > filters.threshold_li(median)

remove_holes = morphology.remove_small_holes(threshold, 20**3)
remove_objects = morphology.remove_small_objects(remove_holes, 20**3)

labels = measure.label(remove_objects)

properties = regionprops(labels, nuclei)
centroids = [prop.centroid for prop in properties]

viewer = napari.Viewer()

viewer.add_image(nuclei, colormap="green")
viewer.add_labels(labels)
viewer.add_points(centroids, blending="translucent_no_depth", name="centroids")

viewer.dims.ndisplay = 3
viewer.camera.angles = (-30, 25, 120)

if __name__ == '__main__':
    napari.run()
```
```{python}
#| echo: false
from napari.utils import nbscreenshot
nbscreenshot(viewer, alt_text="A rotated 3D view of labled blobs")
```
```{python}
#| echo: false
#| output: false
viewer.close()
```

## napari strengths

- graphical UI to view & explore 2D, 3D, and higher-dimensional array-like data
    - easy to integrate into existing Python workflows
- intuitive stacking/overlay layer model for channels, modalities, annotations, etc.
- robust GUI data annotation tools
    - annotation data immediately available as Python objects
- highly extensible GUI
- robust plugin ecosystem: [https://napari-hub.org](https://napari-hub.org)

## napari limitations

- **it's just a viewer & annotation tool**
    - **no built-in analysis tools** (but you have Python!)
- not yet feature complete
    - no parity between different layers/features (e.g. multiscale handling)
    - there can be bugs :beetle:
- can run into GPU/memory limitations for some large-data workflows
- Python packaging and dependencies :grimacing:

## Where to get help

- napari documentation: [https://napari.org](https://napari.org)

- image.sc forum: [https://forum.image.sc/tag/napari](https://forum.image.sc/tag/napari)

- napari Zulip chat: [https://napari.zulipchat.com](https://napari.zulipchat.com/)

- napari community meetings: [https://napari.org/stable/community/meeting_schedule.html](https://napari.org/stable/community/meeting_schedule.html)

## Report bugs

- GitHub Issues: [https://github.com/napari/napari/issues](https://github.com/napari/napari/issues)

- Reporting bugs/problems/inconsistencies/confusion is **extremely valuable!**
- When in doubt, reportâ€”we prefer duplicates than crickets!

::: aside
This does require an account (free), **but you can use that account to login at image.sc and zulipchat.com!**
:::

::: {.notes}
reporting problems is very valuable!
:::

## napari viewer

- native application you can launch from the terminal/command prompt using `napari` command or via the application programming interface (API), e.g. `viewer = napari.Viewer()`
- this `viewer` consists of menus, a `canvas` used for display, and widgets with controls for interacting with what is displayed on the `canvas`

## napari viewer

```{python}
#| echo: false
import napari
from napari.utils import nbscreenshot

viewer = napari.Viewer()

nbscreenshot(viewer, alt_text="Empty napari viewer")
```

## napari viewer: Preferences

![](images/preferences.png){fig-alt="Screenshot of napari UI with the Preferences window open." fig-align="center"}

:::{.callout-note}
#### Access via `File` menu (`napari` on macOS)
- Extensive, editable keyboard shortcuts!
- Stored per Python env, reset using `napari --reset`
:::

## Plugins can be installed from within napari

- plugins can be publically discoverable and have global reach via PyPI and [napari-hub.org](https://napari-hub.org)

![](images/napari_plugin_UI.png){height="400" fig-alt="Screenshot of napari UI showing the plugin install/uninstall UI" fig-align="center"}

## napari layers

- the napari visualization data model uses `layers`
- each `layer` (an image or annotation) is composited as a overlay on the previous one, with different opacity and blending options
- the `LayerList` widget allows you to toggle visibility and stacking order
 - the `LayerControls` widget allows you to change visualization settings of a selected layer

## napari layers

```{python}
#| echo: false
from skimage import data
from napari.utils import nbscreenshot

viewer.add_image(data.kidney(), channel_axis = -1, name=['nuclei', 'WGA', 'actin'], colormap=['blue', 'green', 'red'])

nbscreenshot(viewer, alt_text="napari viewer with three layers: actin (red), WGA (green), nuclei (blue) displayed as a composite on the canvas in 2D.")
```

## Interact with napari using the built-in Python console

![](images/console_example.png){fig-alt="Screenshot of napari UI with the Python console open (docked at bottom) and showing some code." fig-align="center"}

:::{.callout-important}
#### Only available when launched from a non-interactive environment
:::

## Run napari from scripts or notebooks
```{python}
#| code-fold: true
#| code-summary: "expand for full code"
#| echo: true
from skimage import data
from scipy import ndimage as ndi

import napari

blobs = data.binary_blobs(length=128, volume_fraction=0.1, n_dim=3)
labeled = ndi.label(blobs)[0]
viewer, image_layer = napari.imshow(blobs, name='blobs')
viewer.add_labels(labeled, name='blob ID')
viewer.dims.ndisplay = 3
viewer.camera.zoom = 3
viewer.camera.angles = (3, 38, 53)

if __name__ == '__main__':
    napari.run()
```
```{python}
#| echo: false
from napari.utils import nbscreenshot
nbscreenshot(viewer, alt_text="A rotated 3D view of labeled blobs")
```
```{python}
#| echo: false
#| output: false
viewer.close()
```

## napari API

- the API and the GUI are bidirectional: 
    - GUI changes are reflected in object property changes
    - API changes are reflected in the GUI

:::{.callout-tip}
### This is even true for annotations, like Point positions or Shape vectors
:::

- if you're not using an interactive environment, you can access it using the built-in `console`
- napari was designed to be extensible

## Python scripts can handle keyboard and mouse events!

- Customize napari functionality:
    * keyboard and mouse events: [https://napari.org/stable/howtos/connecting_events.html](https://napari.org/stable/howtos/connecting_events.html)

```python
@viewer.bind_key('a')
def accept_image(viewer):
    msg = 'this is a good image'
    viewer.status = msg
    print(msg)
```

- Example: [https://napari.org/stable/gallery/custom_mouse_functions.html](https://napari.org/stable/gallery/custom_mouse_functions.html#sphx-glr-gallery-custom-mouse-functions-py)

::: {.notes}
events how-to
:::

## Python scripts can contribute widgets!

![](images/magic_parameter_screenshot.png){height="450" fig-alt="Screenshot of napari UI with a docked widget on the right for applying scikit-image filters" fig-align="center"}

::: aside
Example: [https://napari.org/stable/gallery/magic_parameter_sweep.html](https://napari.org/stable/gallery/magic_parameter_sweep.html)
:::

## Python scripts can contribute widgets!

- [`magicgui`](https://pyapp-kit.github.io/magicgui/) makes this quite easy, see [https://napari.org/stable/guides/magicgui.html](https://napari.org/stable/guides/magicgui.html)
- ...but you can also use `Qt` for maximal control by subclassing `QWidget`

## Beyond that, can develop a napari plugin

napari plugins are Python packages that can:

- add file-type readers & writers
- customize functionality (events)
- extend the GUI (widgets, menus)
- provide demo/sample data

Plugin developer guide: [https://napari.org/dev/plugins/index.html](https://napari.org/dev/plugins/index.html)

::: {.notes}
over 350, you can also choose to contribute to existing plugins
:::
